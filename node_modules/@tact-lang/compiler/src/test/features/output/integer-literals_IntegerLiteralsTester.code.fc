#pragma version =0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "integer-literals_IntegerLiteralsTester.headers.fc";
#include "integer-literals_IntegerLiteralsTester.stdlib.fc";
#include "integer-literals_IntegerLiteralsTester.storage.fc";

;;
;; Contract IntegerLiteralsTester functions
;;

tuple $IntegerLiteralsTester$_contract_init() impure inline_ref {
    tuple $self = null();
    return $self;
}

(tuple, int) $IntegerLiteralsTester$_fun_decLiteral1(tuple $self) impure inline_ref {
    var ($self) = $self;
    return ($self, 123);
}

(tuple, int) $IntegerLiteralsTester$_fun_decLiteral2(tuple $self) impure inline_ref {
    var ($self) = $self;
    return ($self, (- 123));
}

(tuple, int) $IntegerLiteralsTester$_fun_decLiteral3(tuple $self) impure inline_ref {
    var ($self) = $self;
    return ($self, 1012300000);
}

(tuple, int) $IntegerLiteralsTester$_fun_hexLiteral1(tuple $self) impure inline_ref {
    var ($self) = $self;
    return ($self, 291);
}

(tuple, int) $IntegerLiteralsTester$_fun_hexLiteral2(tuple $self) impure inline_ref {
    var ($self) = $self;
    return ($self, (- 291));
}

(tuple, int) $IntegerLiteralsTester$_fun_hexLiteral3(tuple $self) impure inline_ref {
    var ($self) = $self;
    return ($self, 69024612352);
}

(tuple, int) $IntegerLiteralsTester$_fun_binLiteral1(tuple $self) impure inline_ref {
    var ($self) = $self;
    return ($self, 42);
}

(tuple, int) $IntegerLiteralsTester$_fun_binLiteral2(tuple $self) impure inline_ref {
    var ($self) = $self;
    return ($self, (- 42));
}

(tuple, int) $IntegerLiteralsTester$_fun_binLiteral3(tuple $self) impure inline_ref {
    var ($self) = $self;
    return ($self, 672);
}

(tuple, int) $IntegerLiteralsTester$_fun_octLiteral1(tuple $self) impure inline_ref {
    var ($self) = $self;
    return ($self, 83);
}

(tuple, int) $IntegerLiteralsTester$_fun_octLiteral2(tuple $self) impure inline_ref {
    var ($self) = $self;
    return ($self, (- 83));
}

(tuple, int) $IntegerLiteralsTester$_fun_octLiteral3(tuple $self) impure inline_ref {
    var ($self) = $self;
    return ($self, 136937472);
}

;;
;; Receivers of a Contract IntegerLiteralsTester
;;

((tuple), ()) %$IntegerLiteralsTester$_internal_empty(tuple $self) impure inline {
    var $self = $self;
    return ($self, ());
}

;;
;; Get methods of a Contract IntegerLiteralsTester
;;

_ %decLiteral1() method_id(102042) {
    var self = $IntegerLiteralsTester$_contract_load();
    var res = self~$IntegerLiteralsTester$_fun_decLiteral1();
    return res;
}

_ %decLiteral2() method_id(114425) {
    var self = $IntegerLiteralsTester$_contract_load();
    var res = self~$IntegerLiteralsTester$_fun_decLiteral2();
    return res;
}

_ %decLiteral3() method_id(110296) {
    var self = $IntegerLiteralsTester$_contract_load();
    var res = self~$IntegerLiteralsTester$_fun_decLiteral3();
    return res;
}

_ %hexLiteral1() method_id(76310) {
    var self = $IntegerLiteralsTester$_contract_load();
    var res = self~$IntegerLiteralsTester$_fun_hexLiteral1();
    return res;
}

_ %hexLiteral2() method_id(72309) {
    var self = $IntegerLiteralsTester$_contract_load();
    var res = self~$IntegerLiteralsTester$_fun_hexLiteral2();
    return res;
}

_ %hexLiteral3() method_id(68180) {
    var self = $IntegerLiteralsTester$_contract_load();
    var res = self~$IntegerLiteralsTester$_fun_hexLiteral3();
    return res;
}

_ %binLiteral1() method_id(116259) {
    var self = $IntegerLiteralsTester$_contract_load();
    var res = self~$IntegerLiteralsTester$_fun_binLiteral1();
    return res;
}

_ %binLiteral2() method_id(128576) {
    var self = $IntegerLiteralsTester$_contract_load();
    var res = self~$IntegerLiteralsTester$_fun_binLiteral2();
    return res;
}

_ %binLiteral3() method_id(124513) {
    var self = $IntegerLiteralsTester$_contract_load();
    var res = self~$IntegerLiteralsTester$_fun_binLiteral3();
    return res;
}

_ %octLiteral1() method_id(115972) {
    var self = $IntegerLiteralsTester$_contract_load();
    var res = self~$IntegerLiteralsTester$_fun_octLiteral1();
    return res;
}

_ %octLiteral2() method_id(128359) {
    var self = $IntegerLiteralsTester$_contract_load();
    var res = self~$IntegerLiteralsTester$_fun_octLiteral2();
    return res;
}

_ %octLiteral3() method_id(124230) {
    var self = $IntegerLiteralsTester$_contract_load();
    var res = self~$IntegerLiteralsTester$_fun_octLiteral3();
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.debug.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmNsM6dTeFnXrmZ43LGqqPUSo2GCxyd2uh6Au2Yx4hvrwT";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract IntegerLiteralsTester
;;

(tuple, int) $IntegerLiteralsTester$_contract_router_internal(tuple self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive empty message
    if ((op == 0) & (slice_bits(in_msg) <= 32)) {
        self~%$IntegerLiteralsTester$_internal_empty();
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $IntegerLiteralsTester$_contract_load();
    
    ;; Handle operation
    int handled = self~$IntegerLiteralsTester$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $IntegerLiteralsTester$_contract_store(self);
}
