#pragma version =0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "ternary_TernaryTester.headers.fc";
#include "ternary_TernaryTester.stdlib.fc";
#include "ternary_TernaryTester.storage.fc";

;;
;; Contract TernaryTester functions
;;

tuple $TernaryTester$_contract_init() impure inline_ref {
    tuple $self = null();
    return $self;
}

(tuple, int) $TernaryTester$_fun_test1(tuple $self, int $a) impure inline_ref {
    var ($self) = $self;
    return ($self, (($a == 123) ? 1 : 2));
}

(tuple, int) $TernaryTester$_fun_test2(tuple $self, int $a) impure inline_ref {
    var ($self) = $self;
    return ($self, (($a == 123) ? ($a * 2) : ($a * 3)));
}

(tuple, int) $TernaryTester$_fun_test3(tuple $self, int $a, int $b) impure inline_ref {
    var ($self) = $self;
    return ($self, (($a == $b) ? 1 : 2));
}

(tuple, int) $TernaryTester$_fun_test4(tuple $self, int $a, int $b) impure inline_ref {
    var ($self) = $self;
    return ($self, (($a == 123) ? (($b == 456) ? 1 : 2) : (($b == 789) ? 3 : 4)));
}

(tuple, int) $TernaryTester$_fun_test5(tuple $self) impure inline_ref {
    var ($self) = $self;
    return ($self, (true ? 1 : (false ? 2 : 3)));
}

(tuple, int) $TernaryTester$_fun_test6(tuple $self) impure inline_ref {
    var ($self) = $self;
    return ($self, (true ? 1 : (false ? 2 : 3)));
}

(tuple, int) $TernaryTester$_fun_test7(tuple $self) impure inline_ref {
    var ($self) = $self;
    return ($self, (false ? 1 : (true ? 2 : 3)));
}

(tuple, int) $TernaryTester$_fun_test8(tuple $self) impure inline_ref {
    var ($self) = $self;
    return ($self, (false ? 1 : (false ? 2 : 3)));
}

(tuple, int) $TernaryTester$_fun_test9(tuple $self) impure inline_ref {
    var ($self) = $self;
    return ($self, ((true ? false : true) ? 2 : 3));
}

(tuple, int) $TernaryTester$_fun_test10(tuple $self, int $a) impure inline_ref {
    var ($self) = $self;
    return ($self, (($a == 1) ? 42 : (($a == 2) ? 43 : (($a == 3) ? 44 : 45))));
}

;;
;; Receivers of a Contract TernaryTester
;;

((tuple), ()) %$TernaryTester$_internal_empty(tuple $self) impure inline {
    var $self = $self;
    return ($self, ());
}

;;
;; Get methods of a Contract TernaryTester
;;

_ %test1(int $$a) method_id(70304) {
    int $a = $$a;
    var self = $TernaryTester$_contract_load();
    var res = self~$TernaryTester$_fun_test1($a);
    return res;
}

_ %test2(int $$a) method_id(74435) {
    int $a = $$a;
    var self = $TernaryTester$_contract_load();
    var res = self~$TernaryTester$_fun_test2($a);
    return res;
}

_ %test3(int $$a, int $$b) method_id(78562) {
    int $a = $$a;
    int $b = $$b;
    var self = $TernaryTester$_contract_load();
    var res = self~$TernaryTester$_fun_test3($a, $b);
    return res;
}

_ %test4(int $$a, int $$b) method_id(82437) {
    int $a = $$a;
    int $b = $$b;
    var self = $TernaryTester$_contract_load();
    var res = self~$TernaryTester$_fun_test4($a, $b);
    return res;
}

_ %test5() method_id(86564) {
    var self = $TernaryTester$_contract_load();
    var res = self~$TernaryTester$_fun_test5();
    return res;
}

_ %test6() method_id(90695) {
    var self = $TernaryTester$_contract_load();
    var res = self~$TernaryTester$_fun_test6();
    return res;
}

_ %test7() method_id(94822) {
    var self = $TernaryTester$_contract_load();
    var res = self~$TernaryTester$_fun_test7();
    return res;
}

_ %test8() method_id(99209) {
    var self = $TernaryTester$_contract_load();
    var res = self~$TernaryTester$_fun_test8();
    return res;
}

_ %test9() method_id(103336) {
    var self = $TernaryTester$_contract_load();
    var res = self~$TernaryTester$_fun_test9();
    return res;
}

_ %test10(int $$a) method_id(107552) {
    int $a = $$a;
    var self = $TernaryTester$_contract_load();
    var res = self~$TernaryTester$_fun_test10($a);
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.debug.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmQzXtBfkw6PNeNkdZAbicxgVDPkeqm2qaBNhPctz3yMkJ";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract TernaryTester
;;

(tuple, int) $TernaryTester$_contract_router_internal(tuple self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive empty message
    if ((op == 0) & (slice_bits(in_msg) <= 32)) {
        self~%$TernaryTester$_internal_empty();
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $TernaryTester$_contract_load();
    
    ;; Handle operation
    int handled = self~$TernaryTester$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $TernaryTester$_contract_store(self);
}
